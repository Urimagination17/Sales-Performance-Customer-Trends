use classicmodels;

select * from customers;
select * from orders;
select * from orderdetails;
select * from offices;
-- find the total revenue generated for each office
select oc.officeCode, 
round(sum(od.quantityOrdered * od.priceEach),0) as total_revenue_per_office
from customers c
join orders o on c.customerNumber = o.customerNumber
join orderdetails od on o.orderNumber = od.orderNumber
join employees e on e.employeeNumber = c.salesRepEmployeeNumber
join offices oc on oc.officeCode = e.officeCode
group by oc.officeCode;

-- List the top 5 products based on total sales revenue.
select productCode,
round(sum(quantityOrdered * priceEach),0) as total_sales_revenue_per_productcode
from orderdetails
group by productCode
order by total_sales_revenue_per_productcode desc
limit 5;

-- Find top 5 employee who manages the highest number of customers.
select e.employeeNumber, 
e.firstName, 
count(c.customerNumber) as cust_num
from employees e
join customers c on e.employeeNumber = c.salesRepEmployeeNumber
group by e.employeeNumber, e.firstName
order by cust_num desc
limit 5;

-- Retrieve customers who have placed orders for products in all product lines.
select c.customerNumber, c.customerName 
from productlines p1
join products p on p.productline = p1.productline
join orderdetails od on p.productCode = od.productCode
join orders o on od.orderNumber = o.orderNumber
join customers c on o.customerNumber = c.customerNumber
group by c.customerNumber, c.customerName 
having count(distinct p.productline) = (select count(distinct productline) from productlines);

-- Rank top 5 employees based on the total revenue generated by customers assigned to them.
select e.employeeNumber,
e.firstName,
round(sum(od.quantityOrdered*od.priceEach),0) as total_revenue,
ranK() over(order by sum(od.quantityOrdered*od.priceEach) desc) as emp_rank
from employees e 
join customers c on e.employeeNumber = c.salesRepEmployeeNumber
join orders o on o.customerNumber = c.customerNumber
join orderdetails od on o.orderNumber = od.orderNumber
group by e.employeeNumber,
e.firstName
order by emp_rank limit 5;

-- Retrieve the details of the top 3 most expensive products sold per order.
select od.productCode,
p.productName,
dense_rank() over(order by od.priceEach desc) as rnk_flag
from orderdetails od
join products p on p.productCode = od.productCode
order by rnk_flag limit 3;

-- Find the cumulative sales revenue for each product by order date.
select p.productCode, p.productName, o.orderDate,
round(sum(od.quantityOrdered * od.priceEach) over(partition by p.productCode order by o.orderDate),0) as cum_revenue
from orderdetails od
join products p on od.productCode = p.productCode
join orders o on od.orderNumber = o.orderNumber;

-- Calculate the running total of payments received for each customer.
select customerNumber,
paymentDate,
round(amount) as amount,
round(sum(amount) over(partition by CustomerNumber order by paymentDate),0) as running_total
from payments;

-- Identify customers whose orders include both the cheapest and the most expensive products.
with cte as (
	select max(priceEach) as max_price,
	min(priceEach) as min_price
	from orderdetails
)

select c.customerNumber,
c.customerName
from customers c 
join orders o on o.customerNumber = c.customerNumber
join orderdetails od on o.orderNumber = od.orderNumber
where od.priceEach in (select min_price from cte union select max_price from cte)
group by c.customerNumber, c.customerName;

-- List customers who have never placed an order for products in the 'Classic Cars' product line.
SELECT 
   distinct c.customerNumber, 
    c.customerName
FROM 
    customers c
JOIN 
    orders o ON c.customerNumber = o.customerNumber
JOIN 
    orderdetails od ON o.orderNumber = od.orderNumber
JOIN 
    products p ON od.productCode = p.productCode
WHERE 
    c.customerNumber NOT IN (
        SELECT DISTINCT o.customerNumber
        FROM orders o
        JOIN orderdetails od ON o.orderNumber = od.orderNumber
        JOIN products p ON od.productCode = p.productCode
        WHERE p.productLine = 'Classic Cars'
    );
    
-- Find the percentage contribution of each employee to total revenue
select distinct e.employeeNumber, e.firstName,
ROUND(100.0 * SUM(od.quantityOrdered * od.priceEach) / 
             SUM(SUM(od.quantityOrdered * od.priceEach)) OVER(), 2) AS percentage_contribution
from orderdetails od
join orders o on o.orderNumber = od.orderNumber
join customers c on c.customerNumber = o.customerNumber
join employees e on e.employeeNumber = c.salesRepEmployeeNumber 
group by e.employeeNumber, e.firstName
order by percentage_contribution desc;

-- Find the average revenue per employee and compare each employee's revenue to the average
select distinct e.employeeNumber, e.firstName,
ROUND(SUM(od.quantityOrdered * od.priceEach), 2) AS total_revenue,
       ROUND(AVG(SUM(od.quantityOrdered * od.priceEach)) OVER(), 2) AS avg_revenue_per_employee
from orderdetails od
join orders o on o.orderNumber = od.orderNumber
join customers c on c.customerNumber = o.customerNumber
join employees e on e.employeeNumber = c.salesRepEmployeeNumber 
group by e.employeeNumber, e.firstName
order by total_revenue, avg_revenue_per_employee desc; 

-- Rank products within each product line based on total revenue
with cte_rank as (
	select pl.productLine, p.productName ,
	round(sum(od.quantityOrdered*od.priceEach),2) as total_revenue,
	rank() over(partition by p.productLine order by sum(od.quantityOrdered*od.priceEach)) as revenue_rank
	from products p
	join productlines pl on p.productLine = pl.productLine
	join orderdetails od on p.productCode = od.productCode
	group by pl.productLine, p.productName
)
select *
from cte_rank
where revenue_rank <= 5;

-- Find the customer who has placed the maximum number of orders each month
SELECT order_month, order_year, customerNumber, customerName, order_count
FROM (
    SELECT 
        MONTH(o.orderDate) AS order_month,
        YEAR(o.orderDate) AS order_year,
        c.customerNumber,
        c.customerName,
        COUNT(o.orderNumber) AS order_count,
        RANK() OVER (PARTITION BY YEAR(o.orderDate), MONTH(o.orderDate) ORDER BY COUNT(o.orderNumber) DESC) AS rnk
    FROM orders o
    JOIN customers c ON o.customerNumber = c.customerNumber
    GROUP BY YEAR(o.orderDate), MONTH(o.orderDate), c.customerNumber, c.customerName
) ranked
WHERE rnk = 1;
